{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Basic plots with Matplotlib\nYou learned about the basics of data visualization using Matplotlib, a powerful Python library for creating plots. Here's a quick recap:\n\nIntroduction to Matplotlib: You discovered that Matplotlib is essential for creating insightful and visually appealing plots. The subpackage pyplot is commonly imported as plt.\n\nLine Plots: You learned how to create a line plot to visualize data trends over time. For example:","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nplt.plot(year, pop)\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This code plots the year on the x-axis and pop (population) on the y-axis, and displays the plot.\n\nScatter Plots: You explored scatter plots, which are useful for showing the relationship between two variables. For instance:","metadata":{}},{"cell_type":"code","source":"plt.scatter(gdp_cap, life_exp)\nplt.xscale('log')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This code creates a scatter plot with gdp_cap on the x-axis and life_exp on the y-axis, using a logarithmic scale for the x-axis.\n\nInterpreting Plots: You practiced interpreting plots to extract meaningful insights, such as predicting future population growth or understanding the correlation between GDP and life expectancy.\n\nNow you're ready to create more complex and customized plots!\n\nThe goal of the next lesson is to learn how to interpret and analyze histograms to understand data distributions better.","metadata":{}}]}